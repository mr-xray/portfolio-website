---
import { Image, imageConfig } from "astro:assets";
import { slide } from "astro:transitions";
import { v2 as cloudinary } from "cloudinary";

interface Props {
  url: string;
  altText: string;
  classes: string;
  description?: string;
}

const { url, altText, classes, description } = Astro.props;

const tailwindsWidths = {
  "w-": 320,
  "sm:w-": 640,
  "md:w-": 768,
  "lg:w-": 1024,
  "xl:w-": 1280,
  "2xl:w-": 1536,
};

let imageWidths = new Map<number, number>();

let split = url.split("/upload/");
let transformer = "f_auto/q_auto/";
let urls = [];

let tailwindsClasses = classes.split(" ");

let toBeExtrapolated = [];
for (let clazz of tailwindsClasses) {
  for (let width of Object.keys(tailwindsWidths)) {
    if (clazz.startsWith(width)) {
      toBeExtrapolated.push(
        tailwindsWidths[width as keyof typeof tailwindsWidths],
      );
    }
  }
}
let sizes = Object.values(tailwindsWidths).sort((a, b) => b - a);
toBeExtrapolated = toBeExtrapolated.sort((a, b) => b - a);
let extrapolated = new Map<number, number>();
for (let i = 0; i < toBeExtrapolated.length; i++) {
  let sliceIndex = sizes.indexOf(toBeExtrapolated[i]);
  extrapolated.set(toBeExtrapolated[i], sizes[0]);
  sizes = sizes.slice(sliceIndex);
}

for (let clazz of tailwindsClasses) {
  for (let width of Object.keys(tailwindsWidths)) {
    if (clazz.startsWith(width)) {
      let elementWidth;
      let expression = clazz.replace(width, "");
      try {
        elementWidth = eval(expression);
        if (elementWidth >= 1) {
          elementWidth *= 4;
        } else if (elementWidth >= 0 && elementWidth < 1) {
          elementWidth = Math.ceil(
            extrapolated.get(
              tailwindsWidths[width as keyof typeof tailwindsWidths],
            )! * elementWidth,
          );
        }
      } catch (error) {
        if (expression.match("\\[.*\\]") && expression.includes("px")) {
          elementWidth = parseInt(
            expression.replace("px", "").replace("[", "").replace("]", ""),
          );
        }
      }
      imageWidths.set(
        extrapolated.get(
          tailwindsWidths[width as keyof typeof tailwindsWidths],
        )!,
        elementWidth,
      );
    }
  }
}
for (let [screen, imgSize] of imageWidths) {
  urls.push(
    split[0] +
      "/upload/" +
      transformer +
      "c_scale,w_" +
      imgSize +
      "/" +
      split[1] +
      " " +
      screen +
      "w",
  );
}
let srcSet = urls.join(",\n");
---

<div class={classes}>
  <img class="w-full" srcset={srcSet} alt={altText} />
</div>
