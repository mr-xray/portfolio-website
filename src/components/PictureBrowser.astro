---
import { ui } from "../i18n/ui";
import { determineLocale, locale } from "../service/language";
import { useTranslations } from "../i18n/utils";
import DynamicImage from "./DynamicImage.astro";
import loadingGIF from "../images/gif/loading.gif";

let categories = Object.keys(ui.en).filter((key) => key.startsWith("pics."));

const folderFetchEndpoint = Astro.url.origin + "/api/images/search.json";
determineLocale(Astro.url, Astro.preferredLocale);
const t = useTranslations(locale.get() as keyof typeof ui);
---

<div
  class="w-full border-foreground border mb-8 shadow-[2px_4px_12px_0_rgba(0,0,0,0.2)]"
  id="pic-browser"
  data-url={folderFetchEndpoint}
  data-loading={loadingGIF.src}
>
  <div class="w-full">
    <div class="flex flex-wrap">
      {
        categories.map((category, index, array) => (
          <button
            id={"select-" + category}
            class="p-3 mx-0 font-bold transition-all ease-in-out duration-300 select-button"
            onclick={"selectCategory(`" + category + "` )"}
          >
            {t(category as keyof typeof ui.en)}
          </button>
        ))
      }
    </div>
    {
      categories.map((category, index, array) => (
        <>
          <div
            class={"category-display w-full flex-wrap border-t border-foreground ".concat(
              index == 0 ? "flex" : "hidden",
            )}
            id={"preview-container-" + category}
          />
        </>
      ))
    }
  </div>
  <div class="hidden w-full p-1 pt-0" id="load-more-btn">
    <button
      class="w-full self-center py-4 px-10 text-nowrap bg-foreground font-bold text-white"
      onclick='selectCategory(selected.id.split("-")[1], browseState[selected.id].cursor);'
      >{t("picbrowser.load")}</button
    >
  </div>
</div>

<div
  id="image-display"
  class="hidden lg:px-20 px-8 top-0 left-0 max-h-screen fixed overflow-auto w-full h-full z-50 bg-gray/50 justify-center items-center"
>
  <div class="w-full lg:w-3/4 h-3/4 flex justify-center items-center flex-col">
    <i
      class="text-center fas fa-times cursor-pointer text-3xl"
      id="cancel"
      onclick="closeImageDisplay()"></i>
    <div class="max-w-[95%] max-h-full flex justify-center items-center">
      <i
        class="text-center mx-4 lg:mx-8 fas fa-caret-left cursor-pointer text-3xl"
        id="previous"
        data-url=""
        onclick="openLarge(this.dataset.url)"></i>
      <img id="image-modal" class="h-full object-contain" src="" />
      <i
        class="text-center mx-4 lg:mx-8 fas fa-caret-right cursor-pointer text-3xl"
        id="next"
        data-url=""
        onclick="openLarge(this.dataset.url)"></i>
    </div>
  </div>
</div>

<script is:inline>
  const uploadable = document.getElementById("pic-browser");
  var selected;
  var container;
  var browseState = {};
  let categoryButtons = document.getElementsByClassName("select-button");
  for (let btn of categoryButtons) {
    browseState[btn.id] = { hydrated: false, cursor: null, urls: [] };
    if (
      document
        .getElementById("preview-container-" + btn.id.split("-")[1])
        .classList.contains("flex")
    ) {
      container = document.getElementById(
        "preview-container-" + btn.id.split("-")[1],
      );
    }
  }
  const showCategoryDisplay = (category) => {
    if (selected) {
      selected.classList.remove("bg-foreground");
      document.getElementById("load-more-btn").classList.remove("hidden");
      selected.classList.remove("text-white", "flex");
      container.classList.add("hidden");
    }
    selected = document.getElementById("select-" + category);
    selected.classList.add("bg-foreground", "text-white");
    container = document.getElementById("preview-container-" + category);
    container.classList.remove("hidden");
    container.classList.add("flex");
    if (browseState[selected.id].cursor) {
      document.getElementById("load-more-btn").classList.remove("hidden");
    } else {
      document.getElementById("load-more-btn").classList.add("hidden");
    }
  };

  const classes = "lg:w-1/5 p-1 w-1/2 md:w-1/3";

  const constructSrcSet = (url) => {
    const tailwindsWidths = {
      "w-": 320,
      "sm:w-": 640,
      "md:w-": 768,
      "lg:w-": 1024,
      "xl:w-": 1280,
      "2xl:w-": 1536,
    };

    let imageWidths = new Map();

    let split = url.split("/upload/");
    let transformer = "f_auto/q_auto/";
    let urls = [];

    let tailwindsClasses = classes.split(" ");

    let toBeExtrapolated = [];
    for (let clazz of tailwindsClasses) {
      for (let width of Object.keys(tailwindsWidths)) {
        if (clazz.startsWith(width)) {
          toBeExtrapolated.push(tailwindsWidths[width]);
        }
      }
    }
    let sizes = Object.values(tailwindsWidths).sort((a, b) => b - a);
    toBeExtrapolated = toBeExtrapolated.sort((a, b) => b - a);
    let extrapolated = new Map();
    for (let i = 0; i < toBeExtrapolated.length; i++) {
      let sliceIndex = sizes.indexOf(toBeExtrapolated[i]);
      extrapolated.set(toBeExtrapolated[i], sizes[0]);
      sizes = sizes.slice(sliceIndex);
    }

    for (let clazz of tailwindsClasses) {
      for (let width of Object.keys(tailwindsWidths)) {
        if (clazz.startsWith(width)) {
          let elementWidth;
          let expression = clazz.replace(width, "");
          try {
            elementWidth = eval(expression);
            if (elementWidth >= 1) {
              elementWidth *= 4;
            } else if (elementWidth >= 0 && elementWidth < 1) {
              elementWidth = Math.ceil(
                extrapolated.get(tailwindsWidths[width]) * elementWidth,
              );
            }
          } catch (error) {
            if (expression.match("\\[.*\\]") && expression.includes("px")) {
              elementWidth = parseInt(
                expression.replace("px", "").replace("[", "").replace("]", ""),
              );
            }
          }
          imageWidths.set(
            extrapolated.get(tailwindsWidths[width]),
            elementWidth,
          );
        }
      }
    }
    for (let [screen, imgSize] of imageWidths) {
      urls.push(
        split[0] +
          "/upload/" +
          transformer +
          "c_fill,w_" +
          imgSize +
          ",h_" +
          imgSize +
          "/" +
          split[1] +
          " " +
          screen +
          "w",
      );
    }
    return urls.join(",\n");
  };

  const displayImages = (urls, id) => {
    hideLoadingIndicators(id);
    const displayContainer = document.getElementById(id);
    for (let url of urls) {
      displayContainer.innerHTML += `<div class="${classes}" onclick="openLarge('${url}');">
        <img class="w-full cursor-pointer" srcset=${constructSrcSet(url)} alt='Personal image' />
      </div>`;
    }
    if (browseState[selected.id].cursor) {
      document.getElementById("load-more-btn").classList.remove("hidden");
    } else {
      document.getElementById("load-more-btn").classList.add("hidden");
    }
  };

  const showLoadingIndicators = (amount, containerId) => {
    const displayContainer = document.getElementById(containerId);
    const loadingDiv = document.createElement("div");
    const loadingImg = document.createElement("img");
    loadingImg.src = uploadable.dataset.loading;
    loadingImg.classList.add("w-10");
    loadingImg.alt = "loading";
    loadingDiv.className =
      "lg:w-1/5 aspect-square p-1 w-1/2 md:w-1/3 flex justify-center items-center loading-indicator";
    loadingDiv.appendChild(loadingImg);
    for (let i = 0; i < amount; i++) {
      displayContainer.appendChild(loadingDiv.cloneNode(true));
    }
  };

  const hideLoadingIndicators = (containerId) => {
    const displayContainer = document.getElementById(containerId);
    let toBeRemoved = [];
    for (let node of displayContainer.childNodes) {
      if (node.classList.contains("loading-indicator")) {
        toBeRemoved.push(node);
      }
    }
    toBeRemoved.forEach((node) => node.remove());
  };

  const openLarge = (url) => {
    let fullImg = document.getElementById("image-modal");
    let imageDisplay = document.getElementById("image-display");
    imageDisplay.classList.remove("hidden");
    imageDisplay.classList.add("flex");
    fullImg.src = url;
    setupLargeBrowseButtons(url);
  };

  const setupLargeBrowseButtons = (url) => {
    let urls = browseState[selected.id].urls;
    let index = urls.indexOf(url);
    let next = document.getElementById("next");
    let prev = document.getElementById("previous");
    if (index + 1 < urls.length) {
      next.dataset.url = urls[index + 1];
      next.classList.remove("invisible");
    } else {
      next.classList.add("invisible");
    }
    if (index - 1 >= 0) {
      prev.dataset.url = urls[index - 1];
      prev.classList.remove("invisible");
    } else {
      prev.classList.add("invisible");
    }
  };

  const closeImageDisplay = () => {
    let imageDisplay = document.getElementById("image-display");
    imageDisplay.classList.remove("flex");
    imageDisplay.classList.add("hidden");
  };

  const selectCategory = (category, cursor) => {
    let urlParams = cursor
      ? new URLSearchParams({ category: category, next_cursor: cursor })
      : new URLSearchParams({ category: category });
    showCategoryDisplay(category);
    if (cursor || !browseState["select-" + category].hydrated) {
      let fillContainer = container.id;
      showLoadingIndicators(10, fillContainer);
      fetch(uploadable.dataset.url + "?" + urlParams)
        .then((response) => {
          if (response.ok) {
            return response.json();
          }
          throw response;
        })
        .then((data) => {
          browseState["select-" + category].cursor = data["next_cursor"];
          browseState["select-" + category].hydrated = true;
          browseState["select-" + category].urls.push(...data.urls);
          displayImages(data.urls, fillContainer);
        })
        .catch((error) => {
          error.text().then((text) => {
            console.error("Error: " + text);
          });
        });
    }
  };

  selectCategory(
    document.getElementsByClassName("select-button")[0].id.split("-")[1],
  );
</script>
