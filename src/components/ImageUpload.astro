---
import { ui } from "../i18n/ui";
import { locale } from "../service/language";

const {
  imageUploadEndpoint = Astro.url.origin + "/api/images/upload.multipart",
  signatureEndpoint = Astro.url.origin + "/api/images/signature.json",
  maxUploadMb = 5,
} = Astro.props;
---

<form
  id="upload-form"
  method="POST"
  enctype="multipart/form-data"
  data-url={imageUploadEndpoint}
  data-signature={signatureEndpoint}
  data-size={maxUploadMb}
>
  <fieldset>
    <legend>Image category:</legend>
    {
      Object.entries(ui[locale.get()])
        .filter(([key, label]) => key.startsWith("pics"))
        .map(([key, label], index, array) => (
          <>
            <div>
              {index == 0 && (
                <input type="radio" name="category" value={key} checked />
              )}
              {index != 0 && <input type="radio" name="category" value={key} />}
              <label for="category">{label}</label>
            </div>
          </>
        ))
    }
  </fieldset>
  <br />
  <div
    id="drop-container"
    class="flex justify-center align-middle items-center h-52 border-foreground border mb-3"
  >
    <p id="files-selected">Drop here</p>
  </div>
  <label for="file"
    ><div
      class="p-4 w-min inline-block cursor-pointer my-1 mr-2 bg-foreground font-bold text-white"
    >
      Browse
    </div>
    <input class="hidden" type="file" id="file" name="file" multiple />
  </label>

  <label for="post-submit">
    <div
      class="p-4 w-min inline-block cursor-pointer my-1 mr-2 bg-foreground font-bold text-white"
    >
      Upload
      <input id="post-submit" type="submit" class="hidden" />
    </div>
  </label>
  <label for="compression"
    ><div
      class="p-4 inline-block cursor-pointer my-1 mr-2 bg-foreground font-bold text-white"
    >
      Compress images to {maxUploadMb}MB
      <input
        class="ml-3"
        type="checkbox"
        id="compression"
        name="compression"
        checked
      />
    </div>
  </label>

  <div
    id="cdn-response"
    class="hidden p-4 my-1 mr-2 border-foreground border font-bold text-foreground"
  >
    <p id="cdn-text">Uploading to CDN...</p>
  </div>
  <input
    class="p-4 my-1 mr-2 border-foreground border font-bold text-foreground"
    type="password"
    name="password"
    id="password"
    placeholder="Enter Secret Code"
    required
  />
  <div class="w-full hidden" id="compression-display">
    <p id="compression-counter" class="p-4"></p>
    <div class="relative flex items-center mt-1 w-full">
      <div
        id="compression-progress"
        style="width:0%;"
        class="absolute h-2.5 z-10 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 rounded-full"
      >
      </div>
      <div class="z-0 w-full rounded-full h-2.5 dark:bg-gray-700">
        <div class="bg-slate-200 h-2.5 rounded-full" style="width: 100%"></div>
      </div>
    </div>
  </div>
</form>

<script
  type="text/javascript"
  src="https://cdn.jsdelivr.net/npm/browser-image-compression@2.0.1/dist/browser-image-compression.js"
></script>
<script is:inline>
  const uploadForm = document.getElementById("upload-form");
  const dropContainer = document.getElementById("drop-container");
  const fileDisplay = document.getElementById("files-selected");
  const cdnResponse = document.getElementById("cdn-response");
  const input = document.getElementById("file");

  if (input.files?.length != 0) {
    fileDisplay.innerText = input.files?.length + " file(s) selected";
  }
  let compressedFiles;
  uploadForm.addEventListener("submit", async function (e) {
    e.preventDefault();
    if (!compressedFiles && document.getElementById("compression").checked) {
      compressedFiles = await compressFiles(input.files);
    }
    if (input.files?.length == 0) {
      fileDisplay.innerText = "Please select files!";
      return;
    }
    cdnResponse.classList.remove("hidden");
    cdnResponse.classList.add("inline-block");
    const category = document.querySelector(
      'input[name="category"]:checked',
    ).value;
    upload(compressedFiles, category);
    /*fetch(uploadForm.dataset.url, {
      method: "POST",
      body: formData,
    })
      .then((response) => {
        document.getElementById("cdn-response")?.classList.add("hidden");
        document
          .getElementById("cdn-response")
          ?.classList.remove("inline-block");
        if (response.ok) {
          dropContainer.classList.add("bg-[#bbceb4]");
          fileDisplay.innerHTML = "";
          return response.json();
        }
        throw response;
      })
      .then((result) => {
        fileDisplay.innerHTML = result.join("<br/>");
      })
      .catch((error) => {
        error
          .json()
          .then((msg) => (fileDisplay.innerHTML = "Error: " + msg.message));
      });*/
  });

  function preventDefault(evt) {
    evt.preventDefault();
  }
  dropContainer.addEventListener("dragover", preventDefault);
  dropContainer.addEventListener("dragenter", preventDefault);
  dropContainer.addEventListener("drop", async (evt) => {
    input.files = evt.dataTransfer.files;
    compressFiles(input.files).then((res) => (compressedFiles = res));
    fileDisplay.innerHTML = input.files?.length + " file(s) selected";
    dropContainer.classList.remove("bg-[#bbceb4]");
    evt.preventDefault();
  });

  input.addEventListener("change", (event) => {
    compressFiles(input.files).then((res) => (compressedFiles = res));
    dropContainer.classList.remove("bg-[#bbceb4]");
    fileDisplay.innerHTML = input.files?.length + " file(s) selected";
  });

  async function compressImage(file) {
    const options = {
      maxSizeMB: uploadForm.dataset.size,
      useWebWorker: true,
      onProgress: (p) =>
        (document.getElementById("compression-progress").style.width = p + "%"),
      preserveExif: true,
    };
    return await imageCompression(file, options);
  }

  async function compressFiles(files) {
    if (!document.getElementById("compression").checked) {
      return;
    }
    document.getElementById("compression-display").classList.remove("hidden");
    document.getElementById("compression-display").classList.add("flex");
    let compressionFinished = [];
    for (let i = 0; i < files.length; i++) {
      if (files.item(i).size <= 1048576 * uploadForm.dataset.size) {
        compressionFinished.push(files.item(i));
        continue;
      }
      try {
        document.getElementById("compression-counter").innerText =
          i + 1 + "/" + files.length;
        let compressed = await compressImage(files.item(i));
        compressionFinished.push(compressed);
      } catch (error) {
        compressionFinished.push(files.item(i));
        fileDisplay.innerHTML =
          "Failed to compress file " + i + " of " + files.length;
      }
    }
    document.getElementById("compression-display").classList.remove("flex");
    document.getElementById("compression-display").classList.add("hidden");
    return compressionFinished;
  }

  async function requestSignature(category) {
    let password = document.getElementById("password").value;
    try {
      let response = await fetch(uploadForm.dataset.signature, {
        method: "POST",
        body: JSON.stringify({ password: password, category: category }),
      });

      if (!response.ok) {
        throw response;
      }
      return await response.json();
    } catch (error) {
      const msg = await error.json();
      fileDisplay.innerHTML = "Error: " + msg.message;
    }
  }

  async function upload(files, category) {
    const signData = await requestSignature(category);
    if (!signData) {
      return;
    }
    const url =
      "https://api.cloudinary.com/v1_1/" + signData.cloudname + "/auto/upload";
    const formData = new FormData();
    fileDisplay.innerHTML = "";

    for (let file of files) {
      formData.append("api_key", signData.apikey);
      formData.append("file", file);
      formData.append("signature", signData.signature);
      formData.append("folder", signData.folder);
      formData.append("tags", category + ", image");
      formData.append("timestamp", signData.timestamp);
      fetch(url, {
        method: "POST",
        body: formData,
      })
        .then((response) => {
          if (!response.ok) {
            throw response;
          }
          return response.json();
        })
        .then((data) => {
          fileDisplay.innerHTML += data.asset_id + "<br/>";
        })
        .catch((error) => {
          ok = false;
          error
            .json()
            .then((msg) => (fileDisplay.innerHTML = "Error: " + msg.message));
        });
    }
    cdnResponse.classList.add("hidden");
  }
</script>
