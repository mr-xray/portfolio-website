---
import { ui } from "../i18n/ui";
import { locale } from "../service/language";
import { useTranslations } from "../i18n/utils";

const t = useTranslations(locale.get() as keyof typeof ui);

const {
  imageUploadEndpoint = Astro.url.origin + "/api/images/upload.multipart",
} = Astro.props;
---

<url-uploadable data-url={imageUploadEndpoint}>
  <form id="upload-form">
    <fieldset>
      <legend>Image category:</legend>
      {
        Object.entries(ui[locale.get()])
          .filter(([key, label]) => key.startsWith("pics"))
          .map(([key, label], index, array) => (
            <>
              <div>
                {index == 0 && (
                  <input type="radio" name="category" value={key} checked />
                )}
                {index != 0 && (
                  <input type="radio" name="category" value={key} />
                )}
                <label for="category">{label}</label>
              </div>
            </>
          ))
      }
    </fieldset>
    <br />
    <div
      id="drop-container"
      class="flex justify-center align-middle items-center h-52 border-foreground border"
    >
      <p id="files-selected">Drop here</p>
    </div>
    <label for="file"
      ><div
        class="p-4 w-min inline-block cursor-pointer my-4 mr-2 bg-foreground font-bold text-white"
      >
        Browse
      </div>
      <input class="hidden" type="file" id="file" name="file" multiple />
    </label>

    <label for="post-submit">
      <div
        class="p-4 w-min inline-block cursor-pointer my-4 mr-2 bg-foreground font-bold text-white"
      >
        Upload
        <input id="post-submit" type="submit" class="hidden" />
      </div>
    </label>
    <div
      id="cdn-response"
      class="hidden p-4 my-4 mr-2 border-foreground border font-bold text-foreground"
    >
      <p>Awaiting CDN...</p>
    </div>
  </form>
</url-uploadable>

<script>
  class Uploadable extends HTMLElement {
    url: string | undefined;
    constructor() {
      super();
      this.url = this.dataset.url;
    }
  }

  customElements.define("url-uploadable", Uploadable);
  const uploadForm = document.getElementById("upload-form") as HTMLFormElement;
  const uploadable: Uploadable = document.querySelector(
    "url-uploadable",
  ) as any as Uploadable;
  const dropContainer: HTMLElement = document.getElementById("drop-container")!;
  const fileDisplay: HTMLElement = document.getElementById("files-selected")!;
  const input: HTMLInputElement = document.getElementById(
    "file",
  ) as HTMLInputElement;

  if (input.files?.length != 0) {
    fileDisplay.innerText = input.files?.length + " file(s) selected";
  }

  uploadForm.addEventListener("submit", async function (e) {
    e.preventDefault();
    const formData = new FormData(uploadForm);
    console.log(input.files);
    if (input.files?.length == 0) {
      fileDisplay.innerText = "Please select files!";
      return;
    }
    document.getElementById("cdn-response")?.classList.remove("hidden");
    document.getElementById("cdn-response")?.classList.add("inline-block");
    fetch(uploadable.url!, {
      method: "POST",
      headers: {
        Authorization: "Bearer soosasdf",
      },
      body: formData,
    })
      .then((response) => {
        document.getElementById("cdn-response")?.classList.add("hidden");
        document
          .getElementById("cdn-response")
          ?.classList.remove("inline-block");
        if (response.ok) {
          dropContainer.classList.add("bg-[#bbceb4]");
          fileDisplay.innerHTML = "";
          return response.json();
        }
        throw response;
      })
      .then((result) => {
        fileDisplay.innerHTML = result.join("<br/>");
      })
      .catch((error: Response) => {
        error
          .json()
          .then((msg) => (fileDisplay.innerHTML = "Error: " + msg.message));
      });
  });

  function preventDefault(evt: Event) {
    evt.preventDefault();
  }
  dropContainer.addEventListener("dragover", preventDefault);
  dropContainer.addEventListener("dragenter", preventDefault);
  dropContainer.addEventListener("drop", (evt: Event) => {
    (document.getElementById("file")! as HTMLInputElement).files = (
      evt as DragEvent
    ).dataTransfer!.files;
    fileDisplay.innerHTML = input.files?.length + " file(s) selected";
    dropContainer.classList.remove("bg-[#bbceb4]");
    console.log(fileDisplay.innerHTML);
    evt.preventDefault();
  });

  input.addEventListener("change", (event) => {
    dropContainer.classList.remove("bg-[#bbceb4]");
    console.log("soos");
    fileDisplay.innerHTML = input.files?.length + " file(s) selected";
    console.log(fileDisplay.innerHTML);
  });
</script>
